---
######################### Standing Desk ################################
substitutions:
  device_name: standingdesk
  ip_address: 192.168.131.34 # Set use_address below if planning to change static ip
  heightoffsetincm: '0.3'


esphome:
  name: ${device_name}
  platform: ESP8266
  board: d1_mini
  includes:
    - standingdesk_height.h

wifi:
  networks:
    # linksys
  - ssid: !secret lswifissid
    password: !secret lswifipass

  manual_ip:
    static_ip: ${ip_address}
    gateway: !secret wifigateway
    subnet: !secret wifisubnet
    dns1: !secret wifidns

# Enable logging
logger:

api:
  password: !secret espapipass

ota:
  password: !secret espotapass

time:
  - platform: homeassistant
    id: homeassistant_time


output:
  - platform: gpio
    id: pin5
    pin:
      number: D5
      inverted: true

  - platform: gpio
    id: pin6
    pin:
      number: D6
      inverted: true

  - platform: gpio
    id: pin7
    pin:
      number: D7
      inverted: true

number:
  - platform: template
    name: ${device_name}_direction_value
    id: target_movement_cm
    optimistic: true
    unit_of_measurement: 'cm'
    icon: mdi:altimeter
    min_value: 1
    max_value: 70
    step: 1
    initial_value: 10
    restore_value: false
    mode: 'box'

script:

- id: direction_down
  mode: single
  then:
    - logger.log: "Moving down"
    - output.turn_on: pin5
    - delay: !lambda "return float(id(target_movement_cm).state) * 275.2;"
    - output.turn_off: pin5

- id: direction_up
  mode: single
  then:
    - logger.log: "Moving up"
    - output.turn_on: pin6
    - delay: !lambda "return float(id(target_movement_cm).state) * 298.5;"
    - output.turn_off: pin6

- id: position_m1
  mode: single
  then:
    - logger.log: "Memory 1: Standing position"
    - output.turn_on: pin5
    - output.turn_on: pin6
    - delay: 500ms
    - output.turn_off: pin5
    - output.turn_off: pin6

- id: position_m2
  mode: single
  then:
    - logger.log: "Memory 2: Sitting position"
    - output.turn_on: pin7
    - delay: 500ms
    - output.turn_off: pin7

- id: position_m3
  mode: single
  then:
    - logger.log: "Memory 3"
    - output.turn_on: pin5
    - output.turn_on: pin7
    - delay: 500ms
    - output.turn_off: pin5
    - output.turn_off: pin7

- id: position_m4
  mode: single
  then:
    - logger.log: "Memory 4"
    - output.turn_on: pin6
    - output.turn_on: pin7
    - delay: 500ms
    - output.turn_off: pin6
    - output.turn_off: pin7


button:
  - platform: restart
    name: ${device_name}_restart
    id: restart_esp

  - platform: template
    name: ${device_name}_direction_down
    icon: "mdi:arrow-down-bold-outline"
    on_press:
      - script.execute: direction_down
  
  - platform: template
    name: ${device_name}_direction_up
    icon: "mdi:arrow-up-bold-outline"
    on_press:
      - script.execute: direction_up
  
  - platform: template
    name: ${device_name}_position_standing
    icon: "mdi:walk"
    on_press:
      - script.execute: position_m1
  
  - platform: template
    name: ${device_name}_position_sitting
    icon: "mdi:sofa-single-outline"
    on_press:
      - script.execute: position_m2
  
  - platform: template
    name: ${device_name}_position_m3
    on_press:
      - script.execute: position_m3
  
  - platform: template
    name: ${device_name}_position_m4
    on_press:
      - script.execute: position_m4


uart:
  id: desk_uart
  baud_rate: 9600
  rx_pin:
    number: D2
    inverted: false

# binary_sensor:
#   - platform: gpio
#     name: ${device_name}_pin5
#     internal: true
#     pin:
#       number: D5
#       inverted: true
#   - platform: gpio
#     name: ${device_name}_pin6
#     internal: true
#     pin:
#       number: D6
#       inverted: true
#   - platform: gpio
#     name: ${device_name}_pin7
#     internal: true
#     pin:
#       number: D7
#       inverted: true

sensor:
  - platform: wifi_signal
    name: ${device_name}_wifi_signal
    update_interval: 60s
  - platform: uptime
    name: ${device_name}_uptime
  - platform: custom
    lambda: |-
      auto desk_height_sensor = new DeskHeightSensor(id(desk_uart));
      App.register_component(desk_height_sensor);
      return {desk_height_sensor};
    sensors:
      id: "desk_height"
      name: ${device_name}_deskheight
      unit_of_measurement: cm
      accuracy_decimals: 1
      icon: "mdi:counter"
      filters:
        - offset: ${heightoffsetincm}
    
text_sensor:
  - platform: version
    name: ${device_name}_version
  - platform: wifi_info
    ip_address:
      name: ${device_name}_ip
    ssid:
      name: ${device_name}_ssid
    bssid:
      name: ${device_name}_bssid
    mac_address:
      name: ${device_name}_mac